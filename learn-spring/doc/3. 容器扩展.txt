ApplicationContext 用于扩展 BeanFactory 中现有的功能。
ApplicationContext applicationContext = new ClasspathXmlApplicationContext(".xml");

设置配置路径
扩展功能
    初始化前的准备工作。例如对系统属性或者环境变进行准备及验证。
    初始化 BeanFactory 并进行XML 文件读取
    对 BeanFactory 进行各种功能的填充
    子类覆盖方法做额外的处理
    激活各种 BeanFactory 处理器
    注册拦截 bean 创建的 Bean 处理器，这里只是注册，真正调用的是在 getBean 时候
    上下文初始化 Message 源，即对不同语言的消息进行国际化处理
    初始化应用消息广播器，并放入 applicationEventMulticaster bean中
    在所有注册的bean 中查找 listener bean ，注册到消息广播中
    留给子类来初始化其他 Bean
    在所有注册的bean 中查找 listener bean，并注册到广播器中
    在所有剩下的单实例（非惰性的）
    完成刷新过程，通知生命周期处理器 lifecycleProcessor 刷新过程，同时发出 Context RefreshEvent 通知别人
环境准备
    initPropertySources 政府和Spring的开放式结构，给用户最大扩展Spring的能力
    validateRequiredProperties 则是对属性进行验证
加载 beanFactory
    定制BeanFactory
    加载 BeanDefinition
    功能扩展 进入prepareBeanFactory 前，Spring 已经完成了对配置的解析，而 ApplicationContext 在功能上 的扩展由这里展开
        增加对 SPEL 支持
        增加属性注册编辑器
            使用自定义属性编辑器，注册 Spring 自带的属性编辑器 CustomDateEditor，想ApplicationContextAwareProcessor 处理器设置忽略依赖，注册依赖
    BeanFactory 的后处理
        激活注册的 BeanFactoryPostProcessor
            BeanFactoryPostProcessor 的典型应用：PropertyPlaceholderConfigurer
            使用自定义BeanFactoryPostProcessor
            注册 BeanPostProcessor
            初始化消息资源
            初始化 ApplicationEventMulticaster
            注册监听器
            初始化非延迟加载单利
            finishRefresh




