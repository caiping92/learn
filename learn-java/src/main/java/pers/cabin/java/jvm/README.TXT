    java 虚拟机与java语言没有必然的联系，它只是与特定的二进制文件格式——class文件格式所关联。class文件包含java虚拟机指令集
（或称为字节码）和符号表，以及其他一些辅助信息
    基于安全考虑java虚拟机在class文件中施加了许多强制性的语法和结构化约束，方式能用class文件正确表达出来爱的编程语言，都
可以放在java虚拟机里面执行，由于它是一个通用的、与机器无关的执行平台，所以其他语言的实现者都可以考虑将java虚拟机作为那些语言的交付媒介

---------------------------------------------------------------

1.class文件格式
    class文件格式中精确地定义了类与接口的表示形式，包括在平台无关的目标文件格式中一些细节的管理，例如字节序（byte ordering）。
2.数据类型
    2.1 与java语言中的数据类型相似，java虚拟机可以操作的数据类型分为两类：原始类型（primitivie type，原生类型或者基本类型）+引用类型（reference type）
    2.2与之对应，就是 原始值+引用值。它们可用于变量赋值、参数传递、方法返回和运算操作
        2.2.1整数类型和整型值
        2.2.2浮点类型、取值集合及浮点值
        2.2.3returnAddress类型和值
        2.2.4boolean类型
    引用类型与值。jvm中有三种引用类型：类类型+数组类型+接口类型。这些引用值分别指向动态的类实例、数组实例和某个实现了的接口
3. 运行时数据区。
    3.1 pc寄存器。JVM支持多条线程同事执行，每一条java虚拟机线程都有自己的pc（program counter）寄存器。
    3.2 java虚拟机战（也成为java栈）。每一条java虚拟机线程都有自己私有的java虚拟机栈，这个站与线程同时创建，用于储存栈帧。java虚拟机机栈的作用与传统语言中的栈非常相似，
用于存储局部变量与一些尚未计算好的结果。另外在方法返回及调用中也扮演了很重要的角色。因为栈帧的出战和入栈之外，java虚拟机不会再受其他因素的印象，
所以栈帧可以再对中分配，java虚拟机栈所使用的的内存不需要保证是连续的。
    3.3 java堆。再java虚拟机中，堆是可供哥哥线程共享的运行时内存区域，也是供所有类实例和数组对象分配的区域。java堆在java虚拟机启动时就被创建，
它储存了被自动内存管理系统，也就是常说的garbage collector（也就是垃圾收集器）所管理的各种对象，这些对象受管理的对象无需也无法显示的销毁。
虚拟机的实现者可以根据系统的实际需要来选择自动内存管理技术。java堆得容量是可以固定的，也可以伴随程序的执行的需求动态扩展，并不需要过多空间时自动收缩。
java堆所使用的的内存不需要保证是连续的
    3.4 方法区。在java虚拟机中，方法区是可提供各个 线程共享的运行时内存区域。方法区与传统语言中的编译代码储存区或者操作系统进程的正文段的作用非常类似，它储存了每一个类的结构信息。
例如，运行时常量池、字段和方法数据、构造函数和普通方法的字节码内容，还包括一些在类、实例、接口初始化时所用到的特殊方法。
    3.5 运行时常量池。它是class文件中每一个类或接口的常量池的运行时表示形式，它包括了若干种不同的常量，从编译可知的数值面量到必须在运行期解析后才能获得的方法或字段引用。运行时常量池类似于传统语言中的字符表，不过它储存的范围比通常意义上的符号表更为广泛。
        当创建类/接口时，如果构造运行时常量池需要的内存超过了方法区所能提供的最大值，那么java虚拟机将抛出：OutOfMemoryError异常
    3.6 本地方法栈。java虚拟机实现可能会用到传统的栈（通常称为C stack）来支持native方法（指使用java意外的其他语言编写的方法）的执行，这个栈就是本地方法栈。
        可能发生的异常：StackOverflowError -> 线程请求分配的栈容量超过本地方法栈所允许的最大容量
                        OutOfMemoryError -> 在尝试扩展的时候无法申请到足够内存，或者在创建新的线程时没有足够的内存区创建对应的本地方法栈，那么java虚拟机就会抛出
4. 栈帧。 用来存储数据和部分过程的结果数据结构，同时也用来处理动态链接、方法返回值和异常分派。栈帧随着方法的调用而创建，随着方法的结束而销毁。栈帧的存储空间由创建它的方法线程分配在java虚拟机栈中，每一个栈帧都有自己的本地变量表、操作数栈和指向当前方法所属的类的运行时常量池的引用
        栈帧时线程本地私有的数据，不可能在一个栈帧中引用另一个线程的栈帧
    4.1 局部变量表。每个栈帧内部都包含一组称为局部变量表的变量列表。
    4.2 操作数栈。每个栈帧内部都包含一个称为操作数栈的后进先出的栈。
    4.3 动态链接。每个栈帧内部都包含了一个纸箱当前方法的类型的运行时常量池的引用，以便堆当前方法的代码实现动态链接
    4.4 方法调用正常完成
    4.5 方法调用异常完成
5. 对象的表示
    5.8 浮点算法
        5.8.1java虚拟机和IEEE 754中的浮点算法
        5.8.2 浮点模式。每个方法都有一项属性称为浮点模式，取值有两种，要么是FP-strict模式要么是非FP-strict模式。方法的浮点模式取决于class文件中代表方法的method_info结构的访问标志中的ACC_STRICT标志位。
        5.8.3 数值集合转换
    5.9 特殊方法
    5.10 异常
    5.11 字节码指令集简介
    5.12 类库

