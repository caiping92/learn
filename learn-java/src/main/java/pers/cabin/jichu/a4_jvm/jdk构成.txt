1995-5-23 ——> Oak->java
JDK1.0 java第一个正式运行环境。提供了一个纯执行的java虚拟机实现。JDK 1.0 版本的代表技术：Java虚拟机、Applet、AWT
JDK1.1 jar文件格式、JDBC、JavaBeans、RMI。Java语法：内部类、反射
JDK1.2 把java拆分为三个技术体系：JavaSE+JavaEE+JavaME。代表性技术：EJB、Java Plug-in、Java-IDL、Swing。
        内置了JIT编译器（曾并存3个虚拟机 Classic VM、HotSpot、Exact VM[只作为Solaris平台上出现过]）
        JDK1.3 之后所有版本的默认虚拟机 HotSpot
JDK1.5 自动装箱、泛型、动态注解、枚举、可变长参数、遍历循环（for each）
JDK6   提供动态语言支持（通过内置Mozilla JavaScript Rhino 引擎实现）、提供编译API和微型HTTP服务器API.
        在虚拟机上：锁与同步、垃圾收集、类加载等方面的算法都有相当大的改动
2006-11-13 JavaOne大会上，Java开源

200911 年左右 JRockit和HotSpot两个虚拟机合二为一

--------------------------------------------------------------------------------------------------------------
1. Java虚拟机发展史
--------------------------------------------------------------------------------------------------------------
    1.1 Sun Classic / Exact VM
        非JIT编译器，若使用JIT编译器，就必须使用外挂

    1.2 HotSpot
        JDK1.3时，HotSpot VM称为默认的虚拟机，Classic VM作为备用选择 使用 java-classic参数切换
        JDK1.4Classic VM完全退出历史舞台

    JDK8：在HotSpot基础上移植JRockit的优秀特征（例如JRockit的GC和MissionControl服务），使用HotSpot的JIT编译器与混合的运行时系统

    1.3 Sun Mobile-Embedded VM / Meta-Circular VM
        (1)KVM
        (2)CDC/CLDC HotSpot Implementation
        (3)Squawk VM
        (4)JavaIInJava
        (5)Maxin VM.和 JavaInJava非常相似
    1.4 BEA JRockit / IBM J9 VM
    1.5 Appache Harmony  / Google Android Dalvik VM
        Dalvik VM 是Android平台的核心组成部分之一
    1.6 Microsoft JVM

--------------------------------------------------------------------------------------------------------------
2.垃圾收集器

    收集算法：标记-清理，标记-整理，新生代

    2.1 Serial
        最基本的、历史最悠久的收集器，是一个单线程收集器
    2.2 ParNew
        就是Serial收集器的多线程版本，除了使用多条线程进行垃圾
    2.3 Parallel Scavenge
        是一个新生代收集器，也是使用复制算法的收集器，又是进行多线程收集器，Parallel Scavenge收集器的目标这是达到一个可控制的吞吐量
    2.4 Serial Old（MSC）
        是Serial 收集器的老年代版本，是一个单线程收集器，使用“标记-整理”算法
    2.5 Parallel Old
        是Parallel Scavenge收集器的老年代版本，使用多线程和“标记-整理”算法
    2.6 CMS
        是一种以获取最短收回停顿时间为目标的收集器，使用“标记-清楚”算法实现的。整个过程分为4个步骤：初始标记、并发标记、重新标记、并发清除
        初始标记、重新标记仍然需要 “Stop the world”
    2.7 G1 收集器
        是垃圾收集器进一步发展的产物，与CMS收集器相比有了显著的改进：G1 收集器是基于“标记-整理”算法那实现，不会产生空间碎片；
        二是他可以非常精确地控制停顿，既能让使用者明确指定一个长度为M毫秒的时间片段内，小号在垃圾收集上的时间不得超过N毫秒
        将Java堆（包括新生代、老年代）划分为多个大小固定的区域（Region），并且跟踪这些区域里面的垃圾堆积成都，在后台一个优先列表，每次根据允许的收集时间，
        优先回收垃圾最多的区域

--------------------------------------------------------------------------------------------------------------

3 内存分配和回收策略
    Java技术体系中所提倡的自动内存管理终究可以归结为自动化地解决两个问题：给对象分配内存和回收分配给对象的内存
    3.1 对象优先在Eden分配
    3.2 大对象直接进入老年代
    3.3 长期存活的对象进入老年代
            虚拟机采用分代收集的思想来管理内存，给每个对象定义年龄计数器。如果对象在Eden出生并经过一次Minor GC 后仍然存活，并且能被Survivor容纳的话，将被移到Survivor空间中，并将对象年龄设为1.
            对象在Survivor区中每熬过一次Minor GC，年龄就增加1，当它的年龄增加到一定层度（默认15岁）时，就会被晋升到老年代中
    3.4 动态对象年龄判定。
    3.5 空间分配担保
